{"version":3,"file":"ng-backstretch.min.js","sources":["../src/ng-backstretch.js"],"names":["angular","module","directive","$window","$timeout","restrict","scope","images","duration","fade","link","element","Array","isArray","length","styles","wrapper","left","top","overflow","margin","padding","height","width","zIndex","position","image","opacity","border","maxHeight","maxWidth","transition","css","forEach","src","append","index","load","ratio","this","resize","show","background_offset","background_css","root_width","offsetWidth","background_width","root_height","offsetHeight","background_height","i","children","img","bind"],"mappings":";;;;;;;AAOAA,QAAQC,OAAO,qBAEfC,UAAU,eAAgB,UAAW,WAAY,SAASC,EAASC,GACjE,OACEC,SAAU,IACVC,OACEC,OAAQ,qBACRC,SAAU,uBACVC,KAAM,oBAERC,KAAM,SAASJ,EAAOK,GAWpB,GALAL,EAAMC,OAASK,MAAMC,QAAQP,EAAMC,UAAYD,EAAMC,UAAYD,EAAMC,UACvED,EAAME,SAAWF,EAAME,YAAc,IACrCF,EAAMG,KAAOH,EAAMG,QAAU,EAGD,IAAxBH,EAAMC,OAAOO,OACf,OAAO,CAST,IAAIC,IACFC,SACEC,KAAM,EACNC,IAAK,EACLC,SAAU,SACVC,OAAQ,EACRC,QAAS,EACTC,OAAQ,OACRC,MAAO,OACPC,OAAQ,QACRC,SAAU,YAEZC,OACED,SAAU,WACVE,QAAS,EACTP,OAAQ,EACRC,QAAS,EACTO,OAAQ,OACRL,MAAO,OACPD,OAAQ,OACRO,UAAW,OACXC,SAAU,OACVN,OAAQ,QACRO,WAAY,OAAOzB,EAAMG,KAAK,KAKlCH,GAAMU,QAAUhB,QAAQW,QAAQ,mCAChCL,EAAMU,QAAQgB,IAAIjB,EAAOC,SAEzBV,EAAMC,OAAO0B,QAAQ,SAAStB,GAC5BL,EAAMoB,MAAQ1B,QAAQW,QAAQ,SAC9BL,EAAMoB,MAAM,GAAGQ,IAAMvB,EACrBL,EAAMoB,MAAMM,IAAIjB,EAAOW,OAGvBpB,EAAMU,QAAQmB,OAAO7B,EAAMoB,SAI7Bf,EAAQwB,OAAO7B,EAAMU,SAGrBV,EAAM8B,MAAQ,EAEd9B,EAAM+B,KAAO,WAEX/B,EAAMgC,MAAQC,KAAKhB,MAAQgB,KAAKjB,OAGhChB,EAAMkC,SAGNlC,EAAMmC,KAAKnC,EAAM8B,UAGnB9B,EAAMkC,OAAS,WAGb,GASIE,GATAC,GAAkB1B,KAAM,EAAGC,IAAK,EAAGK,MAAO,OAAQD,OAAQ,QAG1DsB,EAAajC,EAAQ,GAAGkC,YACxBC,EAAmBF,EAEnBG,EAAcpC,EAAQ,GAAGqC,aACzBC,EAAoBH,EAAmBxC,EAAMgC,KAK7CW,IAAqBF,GACvBL,GAAqBO,EAAoBF,GAAe,EACxDJ,EAAezB,IAAM,IAAMwB,EAAoB,OAG/CO,EAAoBF,EACpBD,EAAmBG,EAAoB3C,EAAMgC,MAC7CI,GAAqBI,EAAmBF,GAAc,EAEtDD,EAAe1B,KAAO,IAAMyB,EAAoB,MAIlDC,EAAepB,MAAQuB,EAAmB,KAC1CH,EAAerB,OAAS2B,EAAoB,KAG5C3C,EAAMU,QAAQgB,KAAMT,MAAOqB,EAAYtB,OAAQyB,GAE/C,KAAI,GAAIG,GAAI,EAAGA,EAAI5C,EAAMU,QAAQmC,WAAWrC,OAAQoC,IAAK,CACvD,GAAIE,GAAMpD,QAAQW,QAAQL,EAAMU,QAAQmC,WAAWD,GACnDE,GAAIpB,IAAIW,KAIZrC,EAAMmC,KAAO,SAASL,GAEpB,GAAIzB,GAAUL,EAAMU,QAAQmC,WAAWf,EAIvC,OAHA9B,GAAMoB,MAAQ1B,QAAQW,QAAQA,GAGF,IAAxBL,EAAMC,OAAOO,WACfR,GAAMoB,MAAMM,KAAKL,QAAQ,KAKvBS,GAAS9B,EAAMC,OAAOO,OAAO,IAC/BR,EAAM8B,MAAQ,GAIhB9B,EAAMoB,MAAMM,KAAKL,QAAQ,IAGzBvB,EAAS,WACPE,EAAMoB,MAAMM,KAAKL,QAAQ,KACxBrB,EAAME,cAETJ,GAAS,WACPE,EAAMmC,KAAKnC,EAAM8B,UAChB9B,EAAME,YAIXF,EAAMoB,MAAM2B,KAAK,OAAQ/C,EAAM+B,MAG/BrC,QAAQW,QAAQR,GAASkD,KAAK,SAAU/C,EAAMkC","sourcesContent":["/*!\n * ng-backstretch\n * https://github.com/rprovost/ng-backstretch\n *\n * Copyright (c) 2014-2015 Ryan Provost\n * Licensed under the MIT license.\n */\nangular.module('ng-backstretch', []).\n\ndirective('backstretch', ['$window', '$timeout', function($window, $timeout) {\n  return {\n    restrict: 'A',\n    scope: {\n      images: '&backstretchImages',\n      duration: '&backstretchDuration',\n      fade: '&backstretchFade'\n    },\n    link: function(scope, element, attributes) {\n\n      /* In its simplest form, we allow Backstretch to be called on an image path.\n       * e.g. <div backstretch backstretch-url=\"'/path/to/image.jpg'\">\n       * So, we need to turn this back into an array.\n       */\n      scope.images = Array.isArray(scope.images()) ? scope.images() : [scope.images()];\n      scope.duration = scope.duration() || 5000;\n      scope.fade = scope.fade() || 1;\n\n      // We need at least one image or method name\n      if (scope.images.length === 0) {\n        return false;\n      }\n\n      /* STYLES\n       * \n       * Baked-in styles that we'll apply to our elements.\n       * In an effort to keep the plugin simple, these are not exposed as options.\n       * That said, anyone can override these in their own stylesheet.\n       * ========================= */\n      var styles = {\n        wrapper: {\n          left: 0,\n          top: 0,\n          overflow: 'hidden',\n          margin: 0,\n          padding: 0,\n          height: '100%',\n          width: '100%',\n          zIndex: -999998,\n          position: 'absolute',\n        },\n        image: {\n          position: 'absolute',\n          opacity: 0,\n          margin: 0,\n          padding: 0,\n          border: 'none',\n          width: 'auto',\n          height: 'auto',\n          maxHeight: 'none',\n          maxWidth: 'none',\n          zIndex: -999999,\n          transition: 'all '+scope.fade+'s'\n        }\n      };\n\n      // create the scope.wrapper element\n      scope.wrapper = angular.element('<div class=\"backstretch\"></div>');\n      scope.wrapper.css(styles.wrapper);\n\n      scope.images.forEach(function(element, index, array){\n        scope.image = angular.element('<img>');\n        scope.image[0].src = element;\n        scope.image.css(styles.image);\n\n        // append these images to the wrapper\n        scope.wrapper.append(scope.image);\n      });\n\n      // append the wrapper\n      element.append(scope.wrapper);\n\n      // Set the first image\n      scope.index = 0;\n\n      scope.load = function(e) {          \n        // figure out what the width:height ratio is\n        scope.ratio = this.width / this.height;\n\n        // perform an initial sizing\n        scope.resize();\n\n        // display the first image\n        scope.show(scope.index++);\n      };\n\n      scope.resize = function(e) {\n\n        // set some default css\n        var background_css = {left: 0, top: 0, width: 'auto', height: 'auto'};\n\n        // set some initial calculations\n        var root_width = element[0].offsetWidth,\n            background_width = root_width,\n\n            root_height = element[0].offsetHeight,\n            background_height = background_width / scope.ratio,\n\n            background_offset;\n\n        // make adjustments based on image ratio\n        if (background_height >= root_height) {\n          background_offset = (background_height - root_height) / 2;\n          background_css.top = '-' + background_offset + 'px';\n\n        } else {\n          background_height = root_height;\n          background_width = background_height * scope.ratio;\n          background_offset = (background_width - root_width) / 2;\n\n          background_css.left = '-' + background_offset + 'px';\n        }\n\n        // set the css for the width and height\n        background_css.width = background_width + 'px';\n        background_css.height = background_height + 'px';\n\n        // apply the appropriate styles to the wrapper and image\n        scope.wrapper.css({ width: root_width, height: root_height });\n\n        for(var i = 0; i < scope.wrapper.children().length; i++) {\n          var img = angular.element(scope.wrapper.children()[i]);\n          img.css(background_css);\n        }\n      };\n\n      scope.show = function(index) {\n\n        var element = scope.wrapper.children()[index];\n        scope.image = angular.element(element);\n\n        // only one image\n        if (scope.images.length === 1) {\n          scope.image.css({opacity:1});\n          return;\n        }\n\n        // bring things back around once we've hit the end\n        if (index >= scope.images.length-1) {\n          scope.index = 0;\n        }\n\n        // show the image since it's finished loading\n        scope.image.css({opacity:1});\n\n        // hide it once the duration has been reached\n        $timeout(function(){\n          scope.image.css({opacity:0});\n        }, scope.duration);\n\n        $timeout(function(){\n          scope.show(scope.index++);\n        }, scope.duration);\n      };\n\n      // don't do anything until the image has finished loading\n      scope.image.bind('load', scope.load);\n\n      // make sure to update the image sizes when the page scales/changes\n      angular.element($window).bind('resize', scope.resize);\n    }\n  };\n}]);\n"]}